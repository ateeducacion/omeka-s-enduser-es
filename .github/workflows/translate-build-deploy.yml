name: Sync & Translate Omeka S Manual (es)

on:
  schedule:
    - cron: "17 3 * * *"   # daily, 03:17 Europe/Madrid
  workflow_dispatch: {}
  push:
    branches: [ master ]

permissions:
  contents: write   # push translations to master
  pages: write      # upload & deploy GitHub Pages artifact
  id-token: write   # required by actions/deploy-pages

concurrency:
  group: translate-build-deploy
  cancel-in-progress: true

jobs:
  sync-and-translate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Configure Git auth
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Sync fork with upstream (manual git)
        run: |
          set -euo pipefail
          git remote add upstream https://github.com/omeka/omeka-s-enduser.git || true
          git fetch upstream master
          git checkout master
          if git merge-base --is-ancestor HEAD upstream/master; then
            echo "Already up to date."
          else
            git merge --ff-only upstream/master || git merge --no-edit upstream/master
            git push origin master
          fi

      # ---- DeepL key check
      - name: Check DeepL key
        id: deepl
        run: |
          if [ -n "${{ secrets.DEEPL_API_KEY }}" ]; then
            echo "has_key=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_key=false" >> "$GITHUB_OUTPUT"
          fi

      # ---- Bootstrap check: translate ALL if docs/es is missing or empty
      - name: Check if Spanish tree exists
        id: boots
        run: |
          set -euo pipefail
          if [ -d "docs/es" ] && find docs/es -type f -name "*.md" | grep -q .; then
            echo "need_bootstrap=false" >> "$GITHUB_OUTPUT"
          else
            echo "need_bootstrap=true" >> "$GITHUB_OUTPUT"
          fi

      # ---- Incremental diff (only if we already have docs/es)
      - name: Get changed Markdown files
        id: changed
        if: steps.boots.outputs.need_bootstrap == 'false'
        uses: tj-actions/changed-files@v47
        with:
          files: |
            docs/**/*.md
          since_last_remote_commit: false

      - name: Debug changed files
        if: steps.boots.outputs.need_bootstrap == 'false'
        run: |
          echo "Any changed: ${{ steps.changed.outputs.any_changed }}"
          printf "%s\n" ${{ steps.changed.outputs.all_changed_files }}

      # ---- Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (MkDocs + DeepL)
        run: |
          python -m pip install --upgrade pip
          pip install "mkdocs>=1.5" mkdocs-material "mkdocs-static-i18n>=1.2,<2.0" deepl==1.17.0

      # ---- Translate (bootstrap or incremental) using DeepL SDK
      - name: Translate docs to Spanish (Python)
        if: steps.deepl.outputs.has_key == 'true' && (steps.boots.outputs.need_bootstrap == 'true' || steps.changed.outputs.any_changed == 'true')
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          NEED_BOOTSTRAP: ${{ steps.boots.outputs.need_bootstrap }}
          CHANGED_FILES: ${{ steps.changed.outputs.all_changed_files }}
        run: |
          python - <<'PY'
          import os, sys, glob, pathlib, io
          import deepl

          # --- Configuration ---
          SRC_ROOT = pathlib.Path("docs")
          OUT_ROOT = pathlib.Path("docs/es")
          TARGET_LANG = "ES"  # Spanish
          # --- End config ---

          auth = os.environ.get("DEEPL_API_KEY", "")
          if not auth:
            print("No DEEPL_API_KEY; skipping.", file=sys.stderr); sys.exit(0)

          translator = deepl.Translator(auth)
          need_bootstrap = os.environ.get("NEED_BOOTSTRAP", "false") == "true"
          changed_raw = os.environ.get("CHANGED_FILES", "").strip()

          # Collect files to translate
          files: list[str] = []
          if need_bootstrap:
            files = [str(p) for p in SRC_ROOT.rglob("*.md")]
          else:
            if changed_raw:
              files = changed_raw.split()
            else:
              print("No changed files; nothing to translate."); sys.exit(0)

          def out_path(src: pathlib.Path) -> pathlib.Path:
            rel = src.relative_to(SRC_ROOT)
            return OUT_ROOT / rel

          # Ensure output dirs
          for f in files:
            dst = out_path(pathlib.Path(f))
            dst.parent.mkdir(parents=True, exist_ok=True)

          # Translate file-by-file
          for i, f in enumerate(files, 1):
            src = pathlib.Path(f)
            dst = out_path(src)
            try:
              text = src.read_text(encoding="utf-8")
              # Preserve formatting to avoid breaking Markdown/code blocks
              result = translator.translate_text(
                  text,
                  target_lang=TARGET_LANG,
                  preserve_formatting=True,
                  split_sentences="nonewlines"
              )
              dst.write_text(result.text, encoding="utf-8")
              print(f"[{i}/{len(files)}] Translated: {src} -> {dst}")
            except Exception as e:
              print(f"ERROR translating {src}: {e}", file=sys.stderr)
              # Don't fail the whole job on single-file errors
          PY

      # ---- Commit translations (only if we actually created/updated files)
      - name: Commit translated files
        if: steps.deepl.outputs.has_key == 'true' && (steps.boots.outputs.need_bootstrap == 'true' || steps.changed.outputs.any_changed == 'true')
        run: |
          git add docs/es
          git commit -m "chore(i18n): bootstrap/update ES translations" || echo "No changes"
          git push origin master

      # ---- Build site (Material + i18n overlay)
      - name: Build site (i18n overlay)
        run: |
          test -f mkdocs-es.yml || (echo "mkdocs-es.yml missing" && exit 1)
          mkdocs build --clean -f mkdocs-es.yml

      # ---- Publish to GitHub Pages via artifact (no gh-pages branch)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    runs-on: ubuntu-latest
    needs: sync-and-translate
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
